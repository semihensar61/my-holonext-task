{"version":3,"sources":["Components/SceneComponent.jsx","Components/Viewer.jsx","App.js","serviceWorker.js","index.js"],"names":["props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","useState","loaded","setLoaded","scene","setScene","useEffect","window","resize","getEngine","addEventListener","removeEventListener","engine","Engine","current","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","dispose","className","ref","camera","FreeCamera","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","SceneLoader","ImportMesh","meshes","createDefaultCameraOrLight","createDefaultEnvironment","id","App","Component","Boolean","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"wXAKe,G,OAAA,SAACA,GACZ,IAAMC,EAAcC,iBAAO,MACnBC,EAAgGH,EAAhGG,UAAWC,EAAqFJ,EAArFI,cAAeC,EAAsEL,EAAtEK,mBAAoBC,EAAkDN,EAAlDM,aAAcC,EAAoCP,EAApCO,SAA2BC,GAASR,EAA1BS,aAFxD,YAEkFT,EAFlF,gGAIMU,oBAAS,GAJf,mBAIfC,EAJe,KAIPC,EAJO,OAKIF,mBAAS,MALb,mBAKfG,EALe,KAKRC,EALQ,KAiDtB,OA1CAC,qBAAU,WACN,GAAIC,OAAQ,CACR,IAAMC,EAAS,WACPJ,GACAA,EAAMK,YAAYD,UAK1B,OAFAD,OAAOG,iBAAiB,SAAUF,GAE3B,WACHD,OAAOI,oBAAoB,SAAUH,OAG9C,CAACJ,IAEJE,qBAAU,WACN,IAAKJ,EAAQ,CACTC,GAAU,GACV,IAAMS,EAAS,IAAIC,IAAOrB,EAAYsB,QAASpB,EAAWC,EAAeC,GACnEQ,EAAQ,IAAIW,IAAMH,EAAQf,GAChCQ,EAASD,GACLA,EAAMY,UACNzB,EAAMS,aAAaI,GAEnBA,EAAMa,kBAAkBC,SAAQ,SAAAd,GAAK,OAAIb,EAAMS,aAAaI,MAGhEQ,EAAOO,eAAc,WACO,oBAAbrB,GACPA,EAASM,GAEbA,EAAMgB,YAId,OAAO,WACW,OAAVhB,GACAA,EAAMiB,aAGf,CAACzB,EAAoBF,EAAWC,EAAeO,EAAQJ,EAAUP,EAAOC,EAAaY,EAAOP,IAGvF,0CAAQyB,UAAY,iBAAiBC,IAAK/B,GAAiBO,MC1CjEC,G,cAAe,SAAAI,GAEnB,IAAIoB,EAAS,IAAIC,IAAW,UAAW,IAAIC,IAAQ,EAAG,GAAI,IAAKtB,GAG/DoB,EAAOG,UAAUD,IAAQE,QAEzB,IAAMC,EAASzB,EAAMK,YAAYqB,qBAGjCN,EAAOO,cAAcF,GAAQ,GAGjB,IAAIG,IAAiB,QAAS,IAAIN,IAAQ,EAAG,EAAG,GAAItB,GAG1D6B,UAAY,GAElBC,IAAYC,WAAW,GAAI,WAAY,aAAc/B,GAAO,SAAAgC,GAC1DhC,EAAMiC,4BAA2B,GAAM,GAAM,GAC7CjC,EAAMkC,gCAKK,oBACb,yBAAKhB,UAAU,UACb,kBAAC,EAAD,CACE5B,WAAS,EACTM,aAAcA,EACduC,GAAG,gBC7BMC,E,uKARX,OACE,yBAAKlB,UAAU,OACf,kBAAC,EAAD,W,GAJYmB,aCQEC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAAS1B,OAAO,kBAAC,EAAD,MAAS2B,SAASC,eAAe,W","file":"static/js/main.6c4b4dd1.chunk.js","sourcesContent":["import { Engine, Scene } from '@babylonjs/core'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport './SceneComponent.css'\r\n\r\nexport default (props) => {\r\n    const reactCanvas = useRef(null);\r\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [scene, setScene] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (window) {\r\n            const resize = () => {\r\n                if (scene) {\r\n                    scene.getEngine().resize();\r\n                }\r\n            }\r\n            window.addEventListener('resize', resize);\r\n\r\n            return () => {\r\n                window.removeEventListener('resize', resize);\r\n            }\r\n        }\r\n    }, [scene]);\r\n\r\n    useEffect(() => {\r\n        if (!loaded) {\r\n            setLoaded(true);\r\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\r\n            const scene = new Scene(engine, sceneOptions);\r\n            setScene(scene);\r\n            if (scene.isReady()) {\r\n                props.onSceneReady(scene)\r\n            } else {\r\n                scene.onReadyObservable.addOnce(scene => props.onSceneReady(scene));\r\n            }\r\n\r\n            engine.runRenderLoop(() => {\r\n                if (typeof onRender === 'function') {\r\n                    onRender(scene);\r\n                }\r\n                scene.render();\r\n            })\r\n        }\r\n\r\n        return () => {\r\n            if (scene !== null) {\r\n                scene.dispose();\r\n            }\r\n        }\r\n    }, [adaptToDeviceRatio, antialias, engineOptions, loaded, onRender, props, reactCanvas, scene, sceneOptions])\r\n\r\n    return (\r\n            <canvas className = \"SceneComponent\" ref={reactCanvas} {...rest} />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  FreeCamera,\r\n  Vector3,\r\n  HemisphericLight,\r\n  SceneLoader,\r\n} from \"@babylonjs/core\";\r\nimport SceneComponent from \"./SceneComponent\"; // ^^ point to file we created above or 'babylonjs-hook' NPM.\r\n// import * as BABYLON from '@babylonjs/core'\r\nimport \"@babylonjs/loaders\";\r\n\r\nimport \"./Viewer.css\";\r\n\r\nconst onSceneReady = scene => {\r\n  // This creates and positions a free camera (non-mesh)\r\n  var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\r\n\r\n  // This targets the camera to scene origin\r\n  camera.setTarget(Vector3.Zero());\r\n\r\n  const canvas = scene.getEngine().getRenderingCanvas();\r\n\r\n  // This attaches the camera to the canvas\r\n  camera.attachControl(canvas, true);\r\n\r\n  // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n  var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\r\n\r\n  // Default intensity is 1. Let's dim the light a small amount\r\n  light.intensity = 0.7;\r\n\r\n  SceneLoader.ImportMesh(\"\", \"/scenes/\", \"Zebra.gltf\", scene, meshes => {\r\n    scene.createDefaultCameraOrLight(true, true, true);\r\n    scene.createDefaultEnvironment();\r\n  });\r\n};\r\n\r\n\r\nexport default () => (\r\n  <div className=\"Viewer\">\r\n    <SceneComponent\r\n      antialias\r\n      onSceneReady={onSceneReady}\r\n      id=\"my-canvas\"\r\n    />\r\n  </div>\r\n);\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Viewer from './Components/Viewer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Viewer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\nimport * as registerServiceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// registerServiceWorker();"],"sourceRoot":""}